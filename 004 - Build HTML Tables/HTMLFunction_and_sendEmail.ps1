# Function to generate an HTML that can be used for reporting
# Note: don't go too crazy with HTML if practicing as there are limitations with outlook displaying them
function generate_htmlTable {
    param (
        $object
    )

    #----------------
    # Dynamic Columns
    #----------------
    $columns = $object[0].PSObject.Properties.Name # a trick to get the properties in the order, use the first object to get them. you could use get-member but it will lose its order
    $htmlTHData = ""
    $htmlTHData = ($columns | ForEach-Object {
        "  <th align='left' style='padding: 10px;'>$_</th>"
    }) -join "`n"
    $htmlTableColumns = @"
<tr style="background-color: #e7e7e7; color: #000000;">

$htmlTHData
</tr>
"@ # Here strings dont like indentions. Leave it like this

    #----------------
    # Dynamic Rows
    #----------------
    $htmlTableRows = $null
    foreach($item in $object){
        $htmlTableRow = "<tr style='border-top: 1px solid #e7e7e7; border-bottom: 1px solid #e7e7e7;'>`n"
        foreach($column in $columns){ # dynamically add rows depending on how many properties there are
            $value = $item.$column
            $htmlTableRow += "  <td style='padding: 10px;'>$value</td>`n"
        }
        $htmlTableRow += "</tr>`n"
        $htmlTableRows += $htmlTableRow
    }
    $htmlTableRows = $htmlTableRows.TrimEnd("`n") # trim the last one so there no gap

  #----------
  # Pull data together into HTML
  #----------
    $htmlTable = @"
<table cellpadding="10" cellspacing="0" border="0" style="border-collapse: collapse; width: auto; max-width: 100%;; display:inline-table; font-size: 14px; font-family: Calibri, Arial, sans-serif;">
$htmlTableColumns
$htmlTableRows
</table>
"@  # Here strings dont like indentions. Leave it like this

    return $htmlTable # return the table fully constructed
}

# make sure you are connected to azure so we can pull data like episode 1
# connect-azaccount 

#MAKE IT STYALIZED FURTHER WITH HTML... like so:
$subs = (Get-AzSubscription).Name
$dataCollected = New-Object System.Collections.Generic.List[pscustomobject]
foreach ($sub in $subs){ 
    Set-AzContext $sub | Out-Null
    $resources = Get-AzResource
    foreach($resource in $resources){
        $dataCollected.Add([pscustomobject]@{ # HTML STYLING HERE
            Subscription = "<b>$sub</b>"  # make it bold
            Name = "<a href='https://portal.azure.com/#@lb4s.onmicrosoft.com/resource/$($resource.ResourceId)/overview'>$($resource.Name)</a>"  # name that links to the page of the resource
            ResourceGroupName = $resource.ResourceGroupName
            Region = "<p style='color: #00960cff;'> $($resource.location) </p>"  # make it green!
            Tags = (($resource.tags.GetEnumerator() | ForEach-Object {"'$($_.Key) : $($_.Value)'"}) -join ', ')
        })
    }
}

# call the function to generate the data collected into HTML
$htmlTable = generate_htmlTable -object $dataCollected

# Now send it as an email.

# Add opening html section (before the table)
$openHTML = @" 
<p>
Hello Team,<br><br>

Here is the report as requested:<br>
</p>
"@

# Add closing html section (after the table)
$closeHTML = @"
<p>
This email was automatically generated by: <b>ScriptName.ps1</b><br><br>
</p>
<p style="color: #d70000;"><b><i>THIS EMAIL IS AUTOGENERATED, DO NOT REPLY.</i></b></p>
"@
$emailHTML = $openHTML + $htmlTable + $closeHTML

# connect as your personal account (hotmail or outlook)
Connect-MgGraph -Scopes "Mail.Send" 

# Web Request API to send emails as personal account

$ToUser = "<enterEmailAddress>" # set the person to send emails to

$params = @{ # Set Body of API
    Message = @{
        Subject = "Report Generated"
        Body    = @{
            ContentType = "HTML"
            Content     = $emailHTML 
        }
        ToRecipients = @(
            @{ emailAddress = @{ address = $ToUser } }
        )
    }
    SaveToSentItems = $true
}

# Send Web Request
Invoke-MgGraphRequest -Method POST -Uri 'https://graph.microsoft.com/v1.0/me/sendMail' -Body $params